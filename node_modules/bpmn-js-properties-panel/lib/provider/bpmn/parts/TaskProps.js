'use strict';

var nameEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Action'),
    selectEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Dropdown'),
    is = require('bpmn-js/lib/util/ModelUtil').is,
    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,
    processPrice = require('./implementation/ProcessPriceEventDefinition'),
    dropdownProps = require('./DropdownProps');

const SUITABILITY_PROCESS_PRICE = "PROCESS_PRICE",
      SUITABILITY_FETCH_PRICE = "FETCH_PRICE",
      SUITABILITY_SHOPPING_FLOW = "SHOPPING_FLOW";

module.exports = function(group, element, bpmnFactory, canvas, translate, additionalParams) {
  var bo = getBusinessObject(element);
  if (is(element, 'bpmn:Task') && (bo.customElementName == SUITABILITY_SHOPPING_FLOW)) {

    var options = { modelProperty: 'action', label: translate('Action') };
    group.entries = group.entries.concat(nameEntryFactory(element, options, translate));

  }

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_FETCH_PRICE) {

    var options = { modelProperty: 'pricelist', label: translate('Price List ID') };
    group.entries = group.entries.concat(nameEntryFactory(element, options, translate));

  }

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_PROCESS_PRICE) {
    var options = { id:"processPrice_operation" , label: translate('operation'), modelProperty: 'operation', label: translate('Operation'), inputArr: additionalParams.inputArr};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    //var options = { id:"processPrice_operation" , label: translate('operation'), modelProperty: 'operation', label: translate('Operation') };
    //group.entries = group.entries.concat(nameEntryFactory(element, options, translate));

    var options = { id:"processPrice_value" , label: translate('value'), modelProperty: 'value', label: translate('Value') };
    group.entries = group.entries.concat(nameEntryFactory(element, options, translate));
  }
};
